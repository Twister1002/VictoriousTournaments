@model Tournament.Structure.IBracket

@{
    int rounds = Model.NumberOfRounds;
}

<li class="list-table-header">
    <ul class="border" data-columns="@rounds">
        @for (int i = 1; i <= rounds; i++)
        {
            <li class="column">
                Round @i
                @if (!Model.IsFinalized && ViewBag.Permission == DataLib.Permission.TOURNAMENT_ADMINISTRATOR)
                {
                    <div class="best-of-wins">
                        Best of
                        <select>
                            @for (int o = 1; o <= 10; o++)
                            {
                                <option value="@o">@o</option>
                            }
                        </select>
                    </div>
                }
            </li>
        }
    </ul>
</li>
<li class="list-table-body">
    <ul data-columns="@rounds">
        @for (int i = 1; i <= rounds; i++)
        {
            List<Tournament.Structure.IMatch> matches = Model.GetRound(i);

            <li class="round" data-round="@i">
                @foreach (var match in matches)
                {
                    var challenger = match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] : new Tournament.Structure.User();
                    var defender = match.Players[(int)Tournament.Structure.PlayerSlot.Defender] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Defender] : new Tournament.Structure.User();

                    ViewBag.Challenger = challenger;
                    ViewBag.Defender = defender;

                    Html.RenderPartial("Brackets/_Match", match, new ViewDataDictionary(ViewData));
                }
            </li>
        }
    </ul>
</li>