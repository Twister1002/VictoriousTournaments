@model WebApplication.Models.Tournament

@{
    ViewBag.Title = "Tournament";
    Layout = "~/Views/Shared/_Layout.cshtml";

    bool registrationStarted = (DateTime)Model.Model.RegistrationStartDate <= DateTime.Now;
    bool tournamentStarted = (DateTime)Model.Model.TournamentStartDate <= DateTime.Now;
    bool registrationEnded = (DateTime)Model.Model.RegistrationEndDate <= DateTime.Now;
    bool bracketSelected = false;

    ViewBag.TournamentId = Model.Model.TournamentID;
    ViewBag.UserId = Session["User.UserId"] != null ? Session["User.UserId"] : -1;
    ViewBag.isAdministrator = Model.IsAdmin(ViewBag.UserId);
    ViewBag.isCreator = Model.IsCreator(ViewBag.UserId);
    ViewBag.inProgress = Model.Model.InProgress;

    var brackets = Model.GetBrackets();
}

@section metatags {
    <meta property="og:url" content="@Request.Url" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Tournament: @Model.Model.Title" />
    <meta property="og:description" content="@Model.Model.Description" />
    @*<meta property="og:image" content="http://static01.nyt.com/images/2015/02/19/arts/international/19iht-btnumbers19A/19iht-btnumbers19A-facebookJumbo-v2.jpg" />*@
}

<div id="Tournament" data-id="@Model.Model.TournamentID">
    <div class="content-header">
        <div class="info">
            <span class="icon icon-menu tournamentData"></span>

            @if (ViewBag.isAdministrator)
            {
                <span class="icon icon-pencil tournament-update"></span>
                <span class="icon icon-bin tournament-delete"></span>
            }

            @if (Model.Model.InProgress)
            {
                if (Model.IsParticipent(ViewBag.UserId) && ViewBag.UserId != -1 && !Model.IsAccountCheckedIn(ViewBag.UserId))
                {
                    <button class="checkIn">CheckIn</button>
                }
            }
            <h2 class="tournamentTitle">@Model.Model.Title</h2>
            <h3 class="gameTitle">@Model.Model.GameType.Title</h3>
        </div>

        <div class="social-media">
            <button class="facebook-social-button">
                <span class="icon icon-facebook"></span> Share
            </button>
            <button class="twitter-social-button">
                <span class="icon icon-twitter"></span> Share
            </button>
            <button class="twitch">
                <span class="icon icon-twitch"></span> View Broadcasts
            </button>
        </div>
    </div>
    
    <div class="bracketNames">
        <ul class="list-table">
            <li class="list-table-body">
                <ul data-columns="@brackets.Count">
                    @foreach (var bracket in brackets)
                    {
                        <li class="column bracketName @(!bracket.IsLocked && !bracketSelected ? "selected" : "")" data-bracket="@bracket.Id">@bracket.BracketName()</li>

                        if (!bracket.IsLocked)
                        {
                            bracketSelected = true;
                        }
                    }
                </ul>
            </li>
        </ul>
    </div>
    @{
        bracketSelected = false;
    }
    @for (int i = 0; i < brackets.Count; i++)
    {
        var bracket = brackets[i];

        ViewBag.UpperDisplayRounds = bracket.RoundShowing(WebApplication.Models.BracketSection.UPPER);
        ViewBag.LowerDisplayRounds = bracket.RoundShowing(WebApplication.Models.BracketSection.LOWER);
        ViewBag.DisplayRounds = bracket.TotalDispalyRounds(ViewBag.UpperDisplayRounds, ViewBag.LowerDisplayRounds);
        ViewBag.IsFinalized = bracket.IBracket.IsFinalized;
        ViewBag.GrandFinal = bracket.IBracket.GrandFinal != null;
        ViewBag.IsLocked = bracket.IsLocked;

        <div class="bracket @(!bracket.IsLocked && !bracketSelected ? "selected" : "")" data-id="@bracket.Id">
            <ul class="list-table bracket-data">
                <li>
                    <div class="options">
                        @if (ViewBag.isCreator)
                        {
                            if (!bracket.IBracket.IsFinalized)
                            {
                                if (bracket.GetPlayers().Count >= 4)
                                {
                                    <div class="BracketFinalize">
                                        <button type="button" class="bracketFinalizeButton">Finalize Bracket</button>
                                    </div>
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        <div class="message warning">You must have 4 or more participants in this bracket to finalize the bracket.</div>
                                    }
                                    else
                                    {
                                        <div class="message warning">The previous bracket must be locked before continuing.</div>
                                    }
                                }
                            }
                            else
                            {
                                if (!bracket.IsLocked)
                                {
                                    <div class="BracketLock @(bracket.IBracket.IsFinished ? "" : "hide")">
                                        <button type="button" class="bracketLockButton">Lock Bracket</button>
                                    </div>
                                }
                            }
                        }
                    </div>

                    @{ Html.RenderPartial("Brackets/" + bracket.BracketFileName(), bracket, new ViewDataDictionary(ViewData)); }
                </li>
            </ul>
        </div>

                            if (!bracket.IsLocked)
                            {
                                bracketSelected = true;
                            }
                        }
    @{ Html.RenderPartial("Standings", Model, new ViewDataDictionary(ViewData)); }
    @{ Html.RenderPartial("Broadcasts", Model); }
</div>