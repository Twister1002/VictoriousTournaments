@model WebApplication.Models.TournamentViewModel

@{
    ViewBag.Title = "Tournament";
    Layout = "~/Views/Shared/_Layout.cshtml";

    bool registrationStarted = (DateTime)Model.RegistrationStartDate <= DateTime.Now;
    bool tournamentStarted = (DateTime)Model.TournamentStartDate <= DateTime.Now;
    bool registrationEnded = (DateTime)Model.RegistrationEndDate <= DateTime.Now;

    ViewBag.TournamentId = Model.Model.TournamentID;
    ViewBag.UserId = Session["User.UserId"] != null ? Session["User.UserId"] : -1;
    ViewBag.isAdministrator = Model.IsAdministrator(ViewBag.UserId);
    ViewBag.isCreator = Model.IsCreator(ViewBag.UserId);
}

<div id="Tournament" data-id="@Model.Model.TournamentID">
    <div class="content-header">
        <h2 class="tournamentTitle">@Model.Model.Title</h2>
        <div class="tournament-buttons">
            @if (ViewBag.isAdministrator)
            {
                <a href="@Url.Action("Update", "Tournament", new { tournamentId = Model.Model.TournamentID })"><span class="icon icon-pencil"></span></a>
                <span class="icon icon-cross tournament-delete"></span>
            }
        </div>
        <h3 class="gameTitle">@Model.Model.GameType.Title</h3>
    </div>
    @for (int i = 0; i < Model.Tourny.Brackets.Count; i++)
    {
        var Bracket = new WebApplication.Models.BracketViewModel(Model.Tourny.Brackets[i]);
        String bracketName = "";

        <div class="bracket" data-id="@Bracket.Bracket.Id" data-bracketnum="@i">
            <div class="bracket-info">
                @switch (Bracket.Bracket.BracketType)
                {
                    case DatabaseLib.BracketType.SINGLE:
                        bracketName = "Single";
                        break;
                    case DatabaseLib.BracketType.DOUBLE:
                        bracketName = "Double";
                        break;
                    case DatabaseLib.BracketType.ROUNDROBIN:
                        bracketName = "RoundRobin";
                        break;
                    case DatabaseLib.BracketType.SWISS:
                        bracketName = "Swiss";
                        break;
                    default:
                        bracketName = null;
                        break;
                }

                <h3 class="name">@bracketName</h3>
                <div class="options">
                    @if (Bracket.Bracket.IsFinalized)
                    {
                        if (ViewBag.isCreator)
                        {
                            <span class="icon icon-loop2 tournament-reset"></span>
                        }

                        <span class="icon icon-trophy tournament-standings"></span>

                        if (!Model.isAccountCheckedIn(ViewBag.UserId))
                        {
                            <button class="checkIn">CheckIn</button>
                        }
                    }
                </div>
            </div>
            <ul class="list-table bracket-data">
                @{
                    if (!Bracket.Bracket.IsFinalized && ViewBag.isCreator)
                    {
                        Html.RenderPartial("Administrator/_Finalize");
                    }
                    
                    Html.RenderPartial("Brackets/" + bracketName, Bracket, new ViewDataDictionary(ViewData));
                    Html.RenderPartial("Brackets/Shared/_Standings", Bracket);
                }
            </ul>
        </div>
    }
</div>