@model WebApplication.Models.TournamentViewModel

@{
    ViewBag.Title = "Tournament";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int userId = -1;
    bool registrationStarted = (DateTime)Model.RegistrationStartDate <= DateTime.Now;
    bool tournamentStarted = (DateTime)Model.TournamentStartDate <= DateTime.Now;
    bool registrationEnded = (DateTime)Model.RegistrationEndDate <= DateTime.Now;
    bool isLoggedIn = Session["User.UserId"] != null;
    bool isTournyAdministrator = false;

    if (isLoggedIn) { int.TryParse(Session["User.UserId"].ToString(), out userId); isTournyAdministrator = Model.Model.CreatedByID == userId; }

    ViewBag.isAdministrator = isTournyAdministrator;
    ViewBag.isLoggedIn = isLoggedIn;
}

<div id="Tournament" data-id="@Model.Model.TournamentID">
    <div class="content-header">
        <h2>Tournament - @Model.Model.Title</h2>
        <div class="tournament-buttons">
            @if (isTournyAdministrator)
            {
                <a href="@Url.Action("Update", "Tournament", new { id = Model.Model.TournamentID })">
                    <img src="~/Images/pencil.png" />
                </a>
                <img class="tournament-delete" data-id="@Model.Model.TournamentID" src="~/Images/svg/cross.svg" />
            }

            <img class="tournament-standings" src="~/Images/svg/trophy.svg" />
        </div>
    </div>
    @{
        if (isTournyAdministrator)
        {
            if (registrationEnded && Model.Model.Brackets.ToList()[0].Matches.Count == 0)
            {
                Html.RenderPartial("Administrator/_Finalize", Model);
            }

            //Html.RenderPartial("Administrator/_Players", Model);
            Html.RenderPartial("_ViewTournament", Model.Tourny, new ViewDataDictionary(ViewData));
        }
        else
        {
            if (registrationStarted && !registrationEnded)
            {
                Html.RenderPartial("_ViewRegistration", Model, new ViewDataDictionary(ViewData));
            }
            else if ((registrationEnded && !tournamentStarted) /* || Model.isBracketReleased */)
            {
                <div class="message success">The tournament is currently being prepared. Please wait until the brackets are released.</div>
            }
            else if (tournamentStarted)
            {
                Html.RenderPartial("_ViewTournament", Model.Tourny, new ViewDataDictionary(ViewData));
            }
            else
            {
                <div class="message exception">Yeah..... something went wrong with displaying the tournament</div>
            }
        }
    }
</div>