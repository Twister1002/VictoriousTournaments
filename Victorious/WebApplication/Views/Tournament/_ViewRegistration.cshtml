@model WebApplication.Models.TournamentViewModel

<div class="TournamentRegistration">
    <div class="description">
        @Model.Model.Description
    </div>
    <div class="registration">
        @{
            if (Session["User.UserId"] != null)
            {
                bool isUserRegistered = Model.Model.UsersInTournament.Any(x => x.UserID == (int)Session["User.UserId"]);
                bool isCreator = Model.Model.CreatedByID == (int)Session["User.UserId"];

                if (isUserRegistered)
                {
                    // Give the user the ability to un-register
                    using (Html.BeginForm("Deregister", "Tournament", new { tournamentVal = Model.Model.TournamentID }, FormMethod.Post))
                    {
                        <button type="submit">Deregister for this tournament</button>
                    }
                }
                else
                {
                    if (Model.Model.TournamentRules.IsPublic)
                    {
                        // Give the user the ability to register
                        using (Html.BeginForm("Register", "Tournament", new { tournamentVal = Model.Model.TournamentID }, FormMethod.Post))
                        {
                        <button type="submit">Register for this tournament</button>
                        }
                    }
                    else
                    {
                        <div class="message warning">This tournament does not allow public registration.</div>
                    }
                }
            }
            else
            {
                <div class="message warning">To register for this tournament, click @Html.ActionLink("here", "Login", "Account", null, new { @class = "clickable-underline" }) to login</div>
            }
        }
    </div>
</div>
