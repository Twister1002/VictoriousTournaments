@model WebApplication.Models.ViewModels.TournamentViewModel
@{
    ViewBag.Title = "Update";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int userId = Session["User.UserId"] != null ? (int)Session["User.UserId"] : -1;
    object attributes = new { };
    object dateAttributes = new { @class = "datepicker" };
    object timeAttributes = new { @class = "timepicker" };
}
@if (!ViewBag.CanEdit)
{
    <div class="message warning">No changes can be made to this tournament.</div>
    attributes = new { disabled = "disabled", @readonly = "readonly" };
    dateAttributes = new { @class = "datepicker", disabled = "disabled", @readonly = "readonly" };
    timeAttributes = new { @class = "timepicker", disabled = "disabled", @readonly = "readonly" };

}
<div id="TournamentEdit">
    @using (Html.BeginForm("Update", "Tournament", FormMethod.Post))
    {
        <div class="section form-section">
            <h2>Basic Information</h2>
            <ul>
                <li>
                    @Html.LabelFor(t => t.Title)
                    @Html.TextBoxFor(t => t.Title, attributes)
                    @Html.ValidationMessageFor(t => t.Title)
                </li>
                <li>
                    @Html.LabelFor(t => t.Description)
                    @Html.TextBoxFor(t => t.Description, attributes)
                    @Html.ValidationMessageFor(t => t.Description)
                </li>
                <li>
                    @Html.LabelFor(t => t.GameTypeID)
                    @Html.DropDownListFor(t => t.GameTypeID, new SelectList(Model.GameTypes, "GameTypeID", "Title"), "---Select Game---", attributes)
                    @Html.ValidationMessageFor(t => t.GameTypeID)
                </li>
                <li>
                    @Html.LabelFor(t => t.PlatformTypeID)
                    @Html.DropDownListFor(t => t.PlatformTypeID, new SelectList(Model.PlatformTypes, "PlatformID", "PlatformName"), "---Select Platform---", attributes)
                    @Html.ValidationMessageFor(t => t.PlatformTypeID)
                </li>
                <li>
                    @Html.LabelFor(t => t.PublicViewing)
                    @Html.CheckBoxFor(t => t.PublicViewing, attributes)
                    @Html.ValidationMessageFor(t => t.PublicViewing)
                </li>
                <li>
                    @Html.LabelFor(t => t.PublicRegistration)
                    @Html.CheckBoxFor(t => t.PublicRegistration, attributes)
                    @Html.ValidationMessageFor(t => t.PublicRegistration)
                </li>
            </ul>
        </div>
        <div class="section form-section bracketSection">
            <h2>Brackets 
                @if (!ViewBag.InProgress)
                {
                    <span class="icon icon-plus"></span> 
                } 
            </h2>
            @for (int i = 0; i < Model.BracketData.Count; i++)
            {
                var bracketData = Model.BracketData[i];

                <ul class="brackets">
                    <li class="rounds">
                        @Html.LabelFor(t => t.BracketTypes)
                        @Html.DropDownList("BracketData[" + i + "].BracketTypeID", new SelectList(Model.BracketTypes, "BracketTypeID", "TypeName", bracketData.BracketTypeID), "---Select Bracket---", attributes)
                        @Html.ValidationMessageFor(t => t.BracketTypes)
                    </li>
                    <li class="swiss rr hide">
                        @Html.LabelFor(t => t.NumberOfRounds)
                        @Html.DropDownList("BracketData[" + i + "].NumberOfRounds", new SelectList(Model.NumberOfRounds, bracketData.NumberOfRounds), "---Rounds---", attributes)
                    </li>
                </ul>
            }
            <ul class="hide bracketOrig">
                <li class="rounds">
                    @Html.LabelFor(t => t.BracketTypes)
                    @Html.DropDownList("BracketData[%n%].BracketType", new SelectList(Model.BracketTypes, "BracketTypeID", "TypeName"), "---Select Bracket---", attributes)
                    @Html.ValidationMessageFor(t => t.BracketTypes)
                </li>
                <li class="swiss rr hide">
                    @Html.LabelFor(t => t.NumberOfRounds)
                    @Html.DropDownList("BracketData[%n%].NumberOfRounds", Enumerable.Range(0, 100).Select(n => new SelectListItem() { Text = n.ToString(), Value = n.ToString() }), attributes)
                </li>
            </ul>
        </div>
        <div class="section form-section">
            <h2>Tournament Dates</h2>
            <ul>
                <li>
                    @Html.LabelFor(t => t.RegistrationStartDate)
                    @Html.TextBoxFor(t => t.RegistrationStartDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.RegistrationStartDate)

                    @Html.TextBoxFor(t => t.RegistrationStartTime, "{0:hh:mm tt}", timeAttributes)
                </li>
                <li>
                    @Html.LabelFor(t => t.RegistrationEndDate)
                    @Html.TextBoxFor(t => t.RegistrationEndDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.RegistrationEndDate)

                    @Html.TextBoxFor(t => t.RegistrationEndTime, "{0:hh:mm tt}", timeAttributes)
                </li>
                <li>
                    @Html.LabelFor(t => t.TournamentStartDate)
                    @Html.TextBoxFor(t => t.TournamentStartDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.TournamentStartDate)

                    @Html.TextBoxFor(t => t.TournamentStartTime, "{0:hh:mm tt}", timeAttributes)
                </li>
                <li>
                    @Html.LabelFor(t => t.TournamentEndDate)
                    @Html.TextBoxFor(t => t.TournamentEndDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.TournamentEndDate)

                    @Html.TextBoxFor(t => t.TournamentEndTime, "{0:hh:mm tt}", timeAttributes)
                </li>
                <li>
                    @Html.LabelFor(t => t.CheckinStartDate)
                    @Html.TextBoxFor(t => t.CheckinStartDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.CheckinStartDate)

                    @Html.TextBoxFor(t => t.CheckinStartTime, "{0:hh:mm tt}", timeAttributes)
                </li>
                <li>
                    @Html.LabelFor(t => t.CheckinEndDate)
                    @Html.TextBoxFor(t => t.CheckinEndDate, "{0:MM/dd/yyyy}", dateAttributes)
                    @Html.ValidationMessageFor(t => t.CheckinEndDate)

                    @Html.TextBoxFor(t => t.CheckinEndTime, "{0:hh:mm tt}", timeAttributes)
                </li>
            </ul>
        </div>
        <div class="section">
            @if (!ViewBag.InProgress)
            {
                <button type="submit">Accept Changes</button>
            }
        </div>
    }
</div>