@model Tournament.Structure.IBracket

@{
    int topRounds = Model.NumberOfRounds;
    int botRounds = Model.NumberOfLowerRounds;
    int maxRounds = Math.Max(topRounds, botRounds);
    int totalRounds = maxRounds + 1;

    int topRoundIndex = 1;
    int botRoundIndex = 1;

    int grandFinals = totalRounds;
    int finalRound = grandFinals - 1;
    int semiFinalRound = finalRound - 1;
    int quarterFinalRound = semiFinalRound - 1;
}

<li class="list-table-header">
    <ul class="border" data-columns="@totalRounds">
        @for (int i = 1; i <= totalRounds; i++)
        {
            String displayTitle = "Round " + i;
            if (i == grandFinals)
            {
                displayTitle = "Grand Finals";
            }
            else if (i == finalRound)
            {
                displayTitle = "Finals";
            }
            else if (i == semiFinalRound)
            {
                displayTitle = "Semi-Finals";
            }
            else if (i == quarterFinalRound)
            {
                displayTitle = "Quarter Finals";
            }

            <li class="column">@displayTitle</li>
        }
    </ul>
</li>
<li class="list-table-body">
    <ul data-columns="@totalRounds">
        @{
            // Upper Bracket
            for (int i = 1; i < totalRounds; i++)
            {
                // Verify if we can put things in this round
                List<Tournament.Structure.IMatch> matches = Model.GetRound(topRoundIndex);

                switch (matches.Count)
                {
                    case 4:
                        if (quarterFinalRound != i)
                        {
                            // Skip this round
                            <li>&nbsp;</li>

                            continue;
                        }
                        break;
                    case 2:
                        if (semiFinalRound != i)
                        {
                            // Skip this round
                            <li>&nbsp;</li>

                            continue;
                        }
                        break;
                    case 1:
                        if (finalRound != i)
                        {
                            // Skip this round
                            <li>&nbsp;</li>

                            continue;
                        }
                        break;
                }

                <li class="round" data-round="@topRoundIndex">
                    @foreach (var match in matches)
                    {
                        var challenger = match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] : new Tournament.Structure.User();
                        var defender = match.Players[(int)Tournament.Structure.PlayerSlot.Defender] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Defender] : new Tournament.Structure.User();

                        if (challenger.Id == -1)
                        {
                            challenger.Name = "Winner from " + match.PreviousMatchNumbers[1];
                        }
                        if (defender.Id == -1)
                        {
                            defender.Name = "Winner from " + match.PreviousMatchNumbers[0];
                        }

                        ViewBag.Challenger = challenger;
                        ViewBag.Defender = defender;

                        Html.RenderPartial("Brackets/_Match", match, new ViewDataDictionary(ViewData));
                    }
                </li>

                topRoundIndex++;
            }
        }
    </ul>

    <ul data-columns="@totalRounds">
        @{
            // Lower Bracket
            for (int i = 1; i < totalRounds; i++)
            {
                // Verify if we can put things in this round
                List<Tournament.Structure.IMatch> matches = Model.GetLowerRound(botRoundIndex);

                <li class="round" data-round="@botRoundIndex">
                    @foreach (var match in matches)
                    {
                        var challenger = match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] : new Tournament.Structure.User();
                        var defender = match.Players[(int)Tournament.Structure.PlayerSlot.Defender] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Defender] : new Tournament.Structure.User();

                        if (challenger.Id == -1)
                        {
                            challenger.Name = "Loser from " + match.PreviousMatchNumbers[1];
                        }
                        if (defender.Id == -1)
                        {
                            defender.Name = "Loser from " + match.PreviousMatchNumbers[0];
                        }

                        ViewBag.Challenger = challenger;
                        ViewBag.Defender = defender;

                        Html.RenderPartial("Brackets/_Match", match, new ViewDataDictionary(ViewData));
                    }
                </li>

                botRoundIndex++;
            }
        }
    </ul>
    <ul data-columns="@totalRounds">
        @{
            for (int roundNum = 1; roundNum <= totalRounds; roundNum++)
            {
                <li class="round">
                    @if (roundNum == totalRounds)
                    {

                        var challenger = new Tournament.Structure.User();
                        var defender = new Tournament.Structure.User();

                        ViewBag.Challenger = challenger;
                        ViewBag.Defender = defender;

                        Html.RenderPartial("Brackets/_Match", Model.GrandFinal, new ViewDataDictionary(ViewData));
                    }
                </li>
            }
        }
    </ul>
</li>