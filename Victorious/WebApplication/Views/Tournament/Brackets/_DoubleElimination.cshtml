@model WebApplication.Models.TournamentViewModel

@{
    var Bracket = Model.Tourny.Brackets[0];
    var topRounds = Bracket.NumberOfRounds;
    var botRounds = Bracket.NumberOfLowerRounds;
    var maxRounds = Math.Max(topRounds, botRounds);
    var totalRounds = maxRounds + 1;

    var isLoggedIn = Session["User.UserId"] != null;
    var isAdministrator = isLoggedIn && (int)Session["User.UserId"] == Model.Model.CreatedByID;
}

<li class="list-table-header">
    <ul class="border" data-columns="@totalRounds">
        @for (int i = 1; i <= totalRounds; i++)
        {
            String displayTitle = "Round " + i;
            if (i == totalRounds)
            {
                displayTitle = "Finals";
            }
            else if (i == totalRounds - 1)
            {
                displayTitle = "Semi-Finals";
            }
            else if (i == totalRounds - 2)
            {
                displayTitle = "Quarter Finals";
            }

            <li class="column">@displayTitle</li>
        }
    </ul>
</li>
<li class="list-table-body">
    <ul data-columns="@totalRounds">
        @{
            // Build the upper matches
            for (int i = topRounds; i < maxRounds; i++)
            {
                <li>&nbsp;</li>
            }

            for (int roundNum = 1; roundNum <= Bracket.NumberOfRounds; roundNum++)
            {
                var matches = Bracket.GetRound(roundNum);

                <li class="round" data-round="@roundNum">
                    @foreach (var match in matches)
                    {
                        var challenger = match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] : new Tournament.Structure.User();
                        var defender = match.Players[(int)Tournament.Structure.PlayerSlot.Defender] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Defender] : new Tournament.Structure.User();

                        ViewBag.Challenger = challenger;
                        ViewBag.Defender = defender;
                        ViewBag.isLoggedIn = isLoggedIn;
                        ViewBag.isAdministrator = isAdministrator;
                        ViewBag.matchNum = match.MatchNumber;
                        ViewBag.IsReady = match.IsReady;

                        Html.RenderPartial("Brackets/_Match", new ViewDataDictionary(ViewData));
                    }
                </li>
            }
        }
        @*{
            <li class="round" data-round="-1">
                @{
                    var final = Bracket.GrandFinal;
                    var finalChallenger = final.ChallengerIndex() != -1 ? Bracket.Players[final.ChallengerIndex()] : new Tournament.Structure.User();
                    var finalDefender = final.DefenderIndex() != -1 ? Bracket.Players[final.DefenderIndex()] : new Tournament.Structure.User();

                    ViewBag.Challenger = finalChallenger;
                    ViewBag.Defender = finalDefender;
                    ViewBag.isLoggedIn = isLoggedIn;
                    ViewBag.isAdministrator = isAdministrator;
                    ViewBag.matchNum = final.MatchNumber;
                    ViewBag.IsReady = final.IsReady;

                    Html.RenderPartial("Brackets/_Match");
                }
            </li>
        }*@
    </ul>
    <ul data-columns="@totalRounds">
        @{
            // Build the lower matches
            for (int i = botRounds; i < maxRounds; i++)
            {
                <li>&nbsp;</li>
            }
            for (int roundNum = 1; roundNum <= Bracket.NumberOfLowerRounds; roundNum++)
            {
                var matches = Bracket.GetLowerRound(roundNum);

                <li class="round" data-round="@roundNum">
                    @foreach (var match in matches)
                    {
                        var challenger = match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Challenger] : new Tournament.Structure.User();
                        var defender = match.Players[(int)Tournament.Structure.PlayerSlot.Defender] != null ? match.Players[(int)Tournament.Structure.PlayerSlot.Defender] : new Tournament.Structure.User();

                        ViewBag.Challenger = challenger;
                        ViewBag.Defender = defender;
                        ViewBag.isLoggedIn = isLoggedIn;
                        ViewBag.isAdministrator = isAdministrator;
                        ViewBag.matchNum = match.MatchNumber;
                        ViewBag.matchName = null;
                        ViewBag.IsReady = match.IsReady;

                        Html.RenderPartial("Brackets/_Match", new ViewDataDictionary(ViewData));
                    }
                </li>
            }
        }
    </ul>
    @*<ul data-columns="@totalRounds">
            @{
                for (int i = 1; i < totalRounds; i++)
                {
                    <li>&nbsp;</li>
                }


            }
        </ul>*@
</li>