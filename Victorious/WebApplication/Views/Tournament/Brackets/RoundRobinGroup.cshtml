@model WebApplication.Models.Bracket

@{
    List<bool> upperRounds = Model.RoundShowing(WebApplication.Models.BracketSection.UPPER);
    List<bool> lowerRounds = Model.RoundShowing(WebApplication.Models.BracketSection.LOWER);

    ViewBag.DisplayRounds = Model.TotalDispalyRounds(upperRounds, lowerRounds);
    ViewBag.Section = WebApplication.Models.BracketSection.UPPER;
    ViewBag.RoundShowing = upperRounds;
    ViewBag.Class = "upper";

    Html.RenderPartial("Brackets/Shared/_Header", Model, new ViewDataDictionary(ViewData));
}

<li class="list-table-body">
    <ul class="list-table group-data">
        <li class="list-table-header">
            <ul data-columns="@Model.Group.NumberOfGroups">
                @for (int g = 1; g <= Model.Group.NumberOfGroups; g++)
                {
                    <li class="column">
                        <div class="groupName" data-groupnum="@g">Group @g</div>
                    </li>
                }
            </ul>
        </li>
    </ul>

    @for (int g = 1; g <= Model.Group.NumberOfGroups; g++)
    {
        <ul class="round hide" data-groupnum="@g" data-columns="@ViewBag.DisplayRounds">
            @for (int i = 1; i <= ViewBag.DisplayRounds; i++)
            {
                <li class="column">
                    @foreach (var match in Model.GetRound(g, i))
                    {
                        Html.RenderPartial("Brackets/Shared/_Match", match, new ViewDataDictionary(ViewData));
                    }
                </li>
            }
        </ul>
    }
</li>